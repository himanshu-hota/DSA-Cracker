   -------------------------------------------------G F G --------------------------------------------------------
   
   class Interval {
        int buy, sell;
    } 
    
    public void stockBuySell(int[] price, int n) {
        int count = 0; // count of solution pairs

        // solution array
        Interval[] sol = new Interval[(n / 2) + 1];
        // Traverse through given price array
        int i = 0;
        while (i < n - 1) {
            // Find Local Minima. Note that the limit is (n-2) as we are
            // comparing present element to the next element.
            while ((i < n - 1) && (price[i + 1] <= price[i])) i++;

            // If we reached the end, break as no further solution possible
            if (i == n - 1) break;

            // Store the index of minima
            Interval inv = new Interval();
            inv.buy = i++;

            // Find Local Maxima.  Note that the limit is (n-1) as we are
            // comparing to previous element
            while ((i < n && i > 0) && (price[i] >= price[i - 1])) i++;

            // Store the index of maxima
            inv.sell = i - 1;
            sol[count] = inv;
            // Increment count of buy/sell pairs
            count++;
        }

        // print solution
        if (count == 0)
            System.out.print("No Profit");
        else {
            for (int j = 0; j < count; j++)
                System.out.print("(" + sol[j].buy + " " + sol[j].sell + ") ");
        }
        System.out.println();
    }


----------------------------------------------L E E T C O D E --------------------------------------------------------


    class Solution {
    public int maxProfit(int[] prices) {
        
        int buy = prices[0];
        int maxProfit = 0;
        int n= prices.length;


        for(int i =1;i<n;i++){
            //if price is low then buy the stock
            if(prices[i]<buy)
                buy = prices[i];

                //calculate current profit
            int profit = prices[i]-buy;
            
            //we profit is more then it is the new maximum profit
            if(profit>maxProfit)
                maxProfit = profit;
        }
        
        return maxProfit;
    }
}