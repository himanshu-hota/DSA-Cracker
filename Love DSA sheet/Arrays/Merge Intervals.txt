public int[][] overlappedInterval(int[][] Intervals)
    {
        // Code here // Code here
        
        List<int[]> res = new ArrayList<>();
        
        if(Intervals.length ==0 || Intervals == null) // check if given interval is empty
        return res.toArray(new int[0][]);
        
        Arrays.sort(Intervals,(a,b) -> a[0]-b[0]);  //sort the interval 
        
        int start = Intervals[0][0]; //store the start point
        int end = Intervals[0][1];	 //store the end point
        
        for(int[] i : Intervals){ //loop through the interval
            
            if(i[0]<=end) //check for each interval if its ending point is greater then starting point of next interval
            end = Math.max(i[1],end); //if true then change the ending point to max ending point of two interval
            else{
                res.add(new int[]{start,end});  //add this interval to your answer
                start = i[0]; //point to new starting point
                end = i[1];   // point ton new ending point
            }
        
        }
        
        res.add(new int[]{start,end}); // add last interval to the answer
        return res.toArray(new int[0][]);
    }