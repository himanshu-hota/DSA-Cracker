// Return array of Intersection

public int[] intersection(int[] nums1, int[] nums2) {

        HashSet<Integer> set = new HashSet<>(); // Set contains only distinct values
        ArrayList<Integer> ans = new ArrayList<>(); // ArrayList to store only Intersection point values
                
        for(int i: nums1){ // Add all elements of first array to set
            set.add(i);
        }
        
        for(int i: nums2){
            if(set.contains(i)){   // Check if set contains the value of second array
                ans.add(i);        // If true then add it to ArrayList
                set.remove(i);     // remove it from set so that each time a value is repeated in second array is not counted as intersection
            }
        }
       
        int arr[] = new int[ans.size()]; // create array to return
        int j =0;
        for(Integer i : ans){
            arr[j] = (int)(i);   // add all elements of ArrayList to Array
            j++;
        }
        
        return arr;
    }


// Return count of Intersection values

public static int NumberofElementsInIntersection(int a[], int b[], int n, int m) {
        // Your code here
        
        HashSet<Integer> set = new HashSet<>();
        int count =0;  // count variable to track count of intersection values
        
        for(int i: a){
            set.add(i);
        }
        
        for(int i : b){
            if(set.contains(i)){
                count++;       	//Increase count each time a Intersection value is found
                set.remove(i);
            }
                
            
                
        }
        
        return count;
        
    }


// Union of two Arrays

 public static int doUnion(int a[], int n, int b[], int m) 
    {
        //Your code here
        
        
        
        HashMap<Integer,Integer> map = new HashMap<>();  // Map to track elements and duplicacy
        
	//Array 1
        for(int i: a){
            if(map.containsKey(i)) 	// Check if map contains the element
            map.put(i,map.get(i)+1); //if yes then increment its frequency by 1
            else
            map.put(i,0);   // Else put the element
            
        }
        
	//Array 2
        for(int i: b){
            if(map.containsKey(i))
            map.put(i,map.get(i)+1);
            else{
            map.put(i,0);
            
            }
            
        }
        
        return map.size();
    }