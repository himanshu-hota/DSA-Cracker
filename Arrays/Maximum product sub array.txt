    public int maxProduct(int[] nums) {
        
        int prod =1,mProd =Integer.MIN_VALUE;
        
	  //Loop to track sub array from begining	
        for(int i =0;i<nums.length;i++){
            prod *= nums[i];
            mProd = Math.max(prod,mProd);
            if(prod == 0)
                prod =1;
        }
        
        prod =1; //reset product to 1 to calculate product from ending
        
	  //loop to track sub array from ending 
        for(int i = nums.length-1;i>=0;i--){
            
            prod *= nums[i];
            mProd = Math.max(prod,mProd);
            if(prod ==0)
                prod =1;
            
        }
        
        return mProd;
    }


	NOTE :- WE ARE CALCULATING MAXIMUM PRODUCT FROM BOTH SIDE BECAUSE IF WE HAVE ANY SING NEGATIVE ELEMENT EITHER ON BEGINING OR ENDING THEN ANS ANSWER WILL BE ONLY NEGATIVE IF WE 
		  CALCULATE FROM ONE SIDE, THAT'S WHY WE ARE CALCULATING PRODUCT FROM BOTH SIDE SO THAT WHEN SINGLE NEGATIVE ELEMENT IS ENCOUNTERD THEN RIGHT ANSWE CAN BE CALCULATED FROM 
		  ANY ONE OF TWO SIDES.

------------------------------------------------------------------------------------------------

			Solution:- https://www.youtube.com/watch?v=GbJh0MjUa5U	

------------------------------------------------------------------------------------------------